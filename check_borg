#!/bin/bash

set -o nounset

PROGNAME=$(basename "$0")
PROGPATH=$(echo "$0" | sed -e 's,[\\/][^\\/][^\\/]*$,,')

export BORG_RELOCATED_REPO_ACCESS_IS_OK=yes

# source a utils.sh from nagios-plugins
# if the check is not executed in the normal check-directory,
# we'll search on common places. This gives us the ability to
# avoid problems with the package-manager
if [ -r "${PROGPATH}/utils.sh" ] && [ -f "${PROGPATH}/utils.sh" ]; then
	. "${PROGPATH}/utils.sh"
elif [ -r /usr/lib/nagios/plugins/utils.sh ] && [ -f /usr/lib/nagios/plugins/utils.sh ]; then
	. /usr/lib/nagios/plugins/utils.sh
elif [ -r /usr/lib/monitoring-plugins/utils.sh ] && [ -f /usr/lib/monitoring-plugins/utils.sh ]; then
	. /usr/lib/monitoring-plugins/utils.sh
else
	echo "Cannot source utils.sh from monitoring-plugins!" >&2
	exit 128
fi

debug(){   ([ "${verbose}" -gt 1 ] && echo "$*") || return 0; }
verbose(){ ([ "${verbose}" -gt 0 ] && echo "$*") || return 0; }
error(){   echo "BORG UNKNOWN, $*"; exit "${STATE_UNKNOWN}"; }

crit='7 days ago'
warn='3 days ago'
verbose=0
prefix=''

usage(){
	cat >&2 <<-FIN
	usage: ${PROGNAME} [-C CONF] [-R REPO] [-D REPO_DIRS] [-E EXCLUDE_DIRS ] [-P PREFIX] [-w DATE] [-c DATE] [ -h -v ]

	REPO: borg repo-url
	      Mutually exclusive of REPO_DIRS
	REPO_DIRS: Comma delimited list of directories to check
	           Or a shell glob pattern. Eg: /backups/*/*
	           For local repos only.
	           Mutually exclusive of REPO
	EXCLUDE_DIRS: A Regex of repo directories from REPO_DIRS
	              To be ignored. Example:
	              '^/backup/old|/backup/test$'
	DATE: Any valid date for the date-command.
	      default for -w: "${warn}"
	      default for -c: "${crit}"
	CONF: A configuration file, which will get sourced. You
	      can use this to set the necessary env variables.
	PREFIX: Only archives that start with this prefix are
          considered. (optional)
    
    -v: Verbose output. For debugging.

	You have to specify in the environment:
	  - BORG_REPO if you haven't passed the -R flag
	  - BORG_PASSPHRASE if your repo is encrypted
	FIN
	exit "${STATE_UNKNOWN}"
}

: "${BORG:=borg}"
command -v "${BORG}" >/dev/null 2>/dev/null \
	|| error "No command '${BORG}' available."

: "${DATE:=date}"
command -v "${DATE}" >/dev/null 2>/dev/null \
	|| error "No command '${DATE}' available."


BORG_REPO=""
REPO_DIRS=""
EXCLUDE_DIRS=""

while getopts ":vhR:D:E:P:C:c:w:" opt; do
	case "${opt}" in
		v)
			verbose=$((verbose + 1))
			;;
		h)
			usage
			;;
		R)
			export "BORG_REPO=${OPTARG}"
			;;
		D)
			REPO_DIRS=${OPTARG}
			;;
		E)
			EXCLUDE_DIRS=${OPTARG}
			;;
		P)
			prefix="${OPTARG}"
			;;
		C)
			[ -e "${OPTARG}" ] || error "Configuration file '${OPTARG}' does not exist."
			[ -r "${OPTARG}" ] || error "Could not read configuration file '${OPTARG}'."
			. "${OPTARG}"      || error "Could not source configuration file '${OPTARG}'."
			;;
		c)
			crit="${OPTARG}"
			;;
		w)
			warn="${OPTARG}"
			;;
		\?)
			error "Invalid option: -${OPTARG}"
			usage
			;;
		:)
			error "Option -${OPTARG} requires an argument."
			usage
			;;
	esac
done

if [ -z "${REPO_DIRS}" -a -z "${BORG_REPO}" ]; then
	error "No repository specified!"
fi

if [ -n "${BORG_REPO}" -a -n "${REPO_DIRS}" ] ; then
    error "Options -R and -D are mutually exclusive!"
fi

if [ -n "${BORG_REPO}" -a -n "${EXCLUDE_DIRS}" ] ; then
    error "Options -R and -E are mutually exclusive!"
fi

[ -n "${BORG_REPO}" ] && verbose "repo ${BORG_REPO}"
[ -n "${REPO_DIRS}" ] && verbose "repo dirs ${REPO_DIRS}" 
[ -n "${EXCLUDE_DIRS}" ] && verbose "repo excludes ${EXCLUDE_DIRS}" 

# convert values to seconds to enable comparison
sec_warn="$(${DATE} --date="${warn}" '+%s')"
sec_crit="$(${DATE} --date="${crit}" '+%s')"

# check warning and critical values
if check_range "${sec_crit}" 0:"${sec_warn}" ; then
	error "Warning value has to be a more recent timepoint than critical value."
fi

ok_msg=""
crit_msg=""
warn_msg=""
worst_code="0"

function check_last {
    last="$(${BORG} list  --glob-archives "${prefix}*" --sort timestamp --last 1 --format '{time}')"
	[ "$?" = 0 ] || error "Cannot list repository archives. Repo Locked?"
	if [ -z "${last}" ]; then
		crit_msg="CRIT: No archive in repository $BORG_REPO\n$crit_msg"
		worst_code=${STATE_CRITICAL}
	fi
	sec_last="$(${DATE} --date="${last}" '+%s')"

	if [ "${sec_crit}" -gt "${sec_last}" ]; then
		worst_code="${STATE_CRITICAL}"
		crit_msg="CRIT: Last backup made of $BORG_REPO on ${last}\n$crit_msg"
	elif [ "${sec_warn}" -gt "${sec_last}" ]; then
		[ $worst_code -lt ${STATE_WARNING} ] && worst_code="${STATE_WARNING}"
		warn_msg="WARN: Last backup made of $BORG_REPO on ${last}\n$warn_msg"
	else
		ok_msg="OK: Last backup made of $BORG_REPO on ${last}\n$ok_msg"
	fi
}

if [ -n "${BORG_REPO}" ] ; then
    check_last
else
    repo_list=`echo ${REPO_DIRS} | tr , ' ' `
    for BORG_REPO in $repo_list ; do
        if [ -n "$EXCLUDE_DIRS" ] ; then
        	if echo $BORG_REPO | grep -qE $EXCLUDE_DIRS ; then
        	    verbose "Skipping $BORG_REPO due to exclude pattern: $EXCLUDE_DIRS"
                continue
    	    fi
    	fi
        export BORG_REPO
        check_last
    done
fi

echo -e "$worst_code: $crit_msg$warn_msg$ok_msg"
exit $worst_code
